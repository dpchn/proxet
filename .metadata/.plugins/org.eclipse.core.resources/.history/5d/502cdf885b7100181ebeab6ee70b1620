package com.hotelproject.api.controller;

import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.catalina.Session;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.hotelproject.api.form.HotelForm;
import com.hotelproject.api.service.HotelService;

@Controller
@RequestMapping("hotel")
public class HotelController {

	@Autowired
	HotelService service;

	@RequestMapping(value = "/getHotelList", produces = MediaType.APPLICATION_JSON_VALUE)
	public static ModelAndView getHotelList(HttpServletRequest request) {
		JSONParser parser = new JSONParser();
		JSONArray jsonArray = null;
		try {
			jsonArray = (JSONArray) parser.parse(new FileReader("G:/hotel.json"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		ModelAndView view = new ModelAndView("hotelListPage");
		view.addObject("hotelList", jsonArray);
		// return new ResponseEntity(jsonArray, HttpStatus.CONFLICT);
		return view;
	}

	@RequestMapping(value = "/getHotel")
	public ModelAndView getHotel(HttpServletRequest request, @RequestParam("hotelId") String id) {
		System.out.println("id : " + id);
		ModelAndView view = new ModelAndView("hotel");
		JSONObject jsonObject = getHotelDetailsById(id);
		/*view.addObject("data", jsonObject);
		list.add(jsonObject);

		set.add(jsonObject);
		if (request.getSession().getAttribute("searchedHotel") == null)
			request.getSession().setAttribute("searchedHotel", list);
		else
			set.addAll((Collection) request.getSession().getAttribute("searchedHotel"));
		System.out.println(set);*/
		request.getSession().setAttribute("hotelId", id);
		List recommendedHotels = SearchedHotelyByCity(jsonObject.get("city").toString());
		System.out.println("Search Hotel : "+jsonObject.get("city").toString());
		request.getSession().setAttribute("searchedHotel",recommendedHotels );
		return view;
	}

	@RequestMapping(value = "/book", method = RequestMethod.POST)
	public ModelAndView requirectToConfirmPage(HttpServletRequest request,
			@ModelAttribute("HotelBookForm") HotelForm form) {
		System.out.println("Booked.....waiting");
		
		List list = new ArrayList<JSONObject>();
		String hotelId = (String) request.getSession().getAttribute("hotelId");
		JSONObject jsonObject = getHotelDetailsById(hotelId);
		list.add(jsonObject);
		if (request.getSession().getAttribute("draftedHotel") == null)
			request.getSession().setAttribute("draftedHotel", list);
		else
			list.addAll((Collection) request.getSession().getAttribute("draftedHotel"));
		System.out.println("Drafted Hotel : "+ list);
		
		form.setHotelId(hotelId);
		request.getSession().setAttribute("hoteForm", form);
		ModelAndView view = new ModelAndView("confirmPage");
		return view;
	}

	@RequestMapping(value = "/confirmBooking")
	public ModelAndView confirmBooking(HttpServletRequest request) {
		HotelForm form = (HotelForm) request.getSession().getAttribute("hoteForm");
		System.out.println("Confirm............");
		request.getSession().getAttribute("draftedHotel");
		int userId = (int) request.getSession().getAttribute("userId");
		String hotelId = (String) request.getSession().getAttribute("hotelId");
		JSONObject hotelDeatils = getHotelDetailsById(hotelId);
		boolean status = service.bookHotel(hotelDeatils.get("name").toString(), hotelId, form.getStartDate(),
				form.getEndDate(), form.getNoOfPeople(), hotelDeatils.get("city").toString(), userId);
		request.getSession().removeAttribute("hotelForm");
		request.getSession().removeAttribute("draftedHotel");
		ModelAndView view = new ModelAndView("profile");
		return view;
	}
	
	@RequestMapping(value = "/draftedHotel")
	public String getDraftedHotel() {
		return "draftedHotel";
	}

	private JSONObject getHotelDetailsById(String id) {
		JSONParser parser = new JSONParser();
		JSONArray jsonArray = null;
		try {
			jsonArray = (JSONArray) parser.parse(new FileReader("G:/hotel.json"));
			for (Object object : jsonArray) {
				JSONObject data = (JSONObject) object;

				if (data.get("id").equals(id)) {
					return data;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	private List<JSONObject> SearchedHotelyByCity(String city) {
		JSONParser parser = new JSONParser();
		JSONArray jsonArray = null;
		List list = new ArrayList<JSONObject>();
		try {
			jsonArray = (JSONArray) parser.parse(new FileReader("G:/hotel.json"));
			for (Object object : jsonArray) {
				JSONObject jsonObject = (JSONObject) object;

				if (jsonObject.get("city").equals(city)) {
					list.add(jsonObject);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
}
